I"2<p>BASIC</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kn">use</span> <span class="nc">GuzzleHttp\Client</span> <span class="k">as</span> <span class="nc">HttpClient</span><span class="p">;</span>
<span class="nc">Route</span><span class="o">::</span><span class="nf">any</span><span class="p">(</span><span class="s1">'/proxy/{path}'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$req</span><span class="p">,</span> <span class="nv">$path</span><span class="p">)</span> <span class="p">{</span>
  <span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpClient</span><span class="p">([</span>
    <span class="s1">'base_uri'</span> <span class="o">=&gt;</span> <span class="s1">'https://httpbin.org'</span>
  <span class="p">]);</span>

  <span class="k">return</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="nf">request</span><span class="p">(</span><span class="nv">$req</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(),</span> <span class="nv">$path</span><span class="p">);</span>
<span class="p">});</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>EXPERT</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="cp">&lt;?php</span>
<span class="c1">// you could use either routes/web.php or routes/api.php</span>

<span class="c1">// simple helper function to filter header array on request &amp; response</span>
<span class="k">function</span> <span class="n">filterHeaders</span><span class="p">(</span><span class="nv">$headers</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$allowedHeaders</span> <span class="o">=</span> <span class="p">[</span><span class="s1">'accept'</span><span class="p">,</span> <span class="s1">'content-type'</span><span class="p">];</span>

    <span class="k">return</span> <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$headers</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$allowedHeaders</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">in_array</span><span class="p">(</span><span class="nb">strtolower</span><span class="p">(</span><span class="nv">$key</span><span class="p">),</span> <span class="nv">$allowedHeaders</span><span class="p">);</span>
    <span class="p">},</span> <span class="no">ARRAY_FILTER_USE_KEY</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">Route</span><span class="o">::</span><span class="nf">any</span><span class="p">(</span><span class="s1">'/proxy_example/{path}'</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$path</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GuzzleHttp\Client</span><span class="p">([</span>
        <span class="c1">// Base URI is used with relative requests</span>
        <span class="s1">'base_uri'</span> <span class="o">=&gt;</span> <span class="s1">'https://pie.dev'</span><span class="p">,</span> <span class="c1">// public dummy API for example</span>
        <span class="c1">// You can set any number of default request options.</span>
        <span class="s1">'timeout'</span>  <span class="o">=&gt;</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="s1">'http_errors'</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// disable guzzle exception on 4xx or 5xx response code</span>
    <span class="p">]);</span>

    <span class="c1">// create request according to our needs. we could add</span>
    <span class="c1">// custom logic such as auth flow, caching mechanism, etc</span>
    <span class="nv">$resp</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="nf">request</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(),</span> <span class="nv">$path</span><span class="p">,</span> <span class="p">[</span>
        <span class="s1">'headers'</span> <span class="o">=&gt;</span> <span class="nf">filterHeaders</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="nb">header</span><span class="p">()),</span>
        <span class="s1">'query'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(),</span>
        <span class="s1">'body'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">getContent</span><span class="p">(),</span>
    <span class="p">]);</span>

    <span class="c1">// recreate response object to be passed to actual caller </span>
    <span class="c1">// according to our needs.</span>
    <span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="nv">$resp</span><span class="o">-&gt;</span><span class="nf">getBody</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getContents</span><span class="p">(),</span> <span class="nv">$resp</span><span class="o">-&gt;</span><span class="nf">getStatusCode</span><span class="p">())</span>
       <span class="o">-&gt;</span><span class="nf">withHeaders</span><span class="p">(</span><span class="nf">filterHeaders</span><span class="p">(</span><span class="nv">$resp</span><span class="o">-&gt;</span><span class="nf">getHeaders</span><span class="p">()));</span>

<span class="p">})</span><span class="o">-&gt;</span><span class="nf">where</span><span class="p">(</span><span class="s1">'path'</span><span class="p">,</span> <span class="s1">'.*'</span><span class="p">);</span> <span class="c1">// required to allow $path to catch all sub-path</span>

</pre></td></tr></tbody></table></code></pre></div></div>

<p>Lumen Route</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nv">$router</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s1">'gateway/{path:[A-Za-z0-9\-@_=:\/+|.]+}'</span><span class="p">,</span> <span class="p">[</span>
     <span class="s1">'as'</span><span class="o">=&gt;</span> <span class="s1">'gateway'</span><span class="p">,</span> <span class="s1">'uses'</span> <span class="o">=&gt;</span> <span class="s1">'GatewayController@gtw'</span>
<span class="p">]);</span>
<span class="nv">$router</span><span class="o">-&gt;</span><span class="nf">post</span><span class="p">(</span><span class="s1">'gateway/{path:[A-Za-z0-9\-@_=:\/+|.]+}'</span><span class="p">,</span> <span class="p">[</span>
     <span class="s1">'as'</span><span class="o">=&gt;</span> <span class="s1">'gateway'</span><span class="p">,</span> <span class="s1">'uses'</span> <span class="o">=&gt;</span> <span class="s1">'GatewayController@gtw'</span>
<span class="p">]);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">qris</span><span class="p">(</span><span class="kt">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$path</span><span class="p">){</span>

	<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="err">\</span><span class="nf">GuzzleHttp\Client</span><span class="p">([</span>
        <span class="c1">// Base URI is used with relative requests</span>
        <span class="s1">'base_uri'</span> <span class="o">=&gt;</span> <span class="s1">'http://10.16.8.230/bimaqris/'</span><span class="p">,</span> <span class="c1">// public dummy API for example</span>
        <span class="c1">// You can set any number of default request options.</span>
        <span class="s1">'timeout'</span>  <span class="o">=&gt;</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="s1">'http_errors'</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// disable guzzle exception on 4xx or 5xx response code</span>
    <span class="p">]);</span>

    <span class="c1">// create request according to our needs. we could add</span>
    <span class="c1">// custom logic such as auth flow, caching mechanism, etc</span>
	<span class="nv">$resp</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="nf">request</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">method</span><span class="p">(),</span> <span class="nv">$path</span><span class="p">,</span> <span class="p">[</span>
		<span class="s1">'headers'</span> <span class="o">=&gt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">filterHeaders</span><span class="p">(</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="nb">header</span><span class="p">()),</span>
		<span class="s1">'query'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(),</span>
		<span class="s1">'body'</span> <span class="o">=&gt;</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="nf">getContent</span><span class="p">(),</span>
	<span class="p">]);</span>

    <span class="c1">// recreate response object to be passed to actual caller </span>
    <span class="c1">// according to our needs.</span>

	<span class="nv">$res</span> <span class="o">=</span> <span class="nv">$resp</span><span class="o">-&gt;</span><span class="nf">getBody</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getContents</span><span class="p">();</span>

	<span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span> <span class="s1">'api/qris/'</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
		<span class="nv">$res</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'http://abc.cp]om/'</span><span class="p">,</span> <span class="nf">config</span><span class="p">(</span><span class="s1">'app.site_url'</span><span class="p">)</span><span class="mf">.</span><span class="s1">'/gateway/'</span><span class="p">,</span> <span class="nv">$res</span><span class="p">);</span>
	<span class="p">}</span>


	<span class="k">return</span> <span class="nf">response</span><span class="p">(</span><span class="nv">$res</span><span class="p">,</span> <span class="nv">$resp</span><span class="o">-&gt;</span><span class="nf">getStatusCode</span><span class="p">())</span>
	<span class="o">-&gt;</span><span class="nf">withHeaders</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">filterHeaders</span><span class="p">(</span><span class="nv">$resp</span><span class="o">-&gt;</span><span class="nf">getHeaders</span><span class="p">()));</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>source:</p>
<blockquote>
  <p>https://dev.to/azophy/using-laravel-as-a-service-proxygateway-3ig9</p>
</blockquote>
:ET